// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using GeometryGraph.Runtime.Attributes;
using JetBrains.Annotations;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::BooleanMathNode")]
    public partial class BooleanMathNode : RuntimeNode {
        public RuntimePort APort { get; }
        public RuntimePort BPort { get; }
        public RuntimePort ResultPort { get; }

        public BooleanMathNode(string guid) : base(guid) {
            APort = RuntimePort.Create(PortType.Boolean, PortDirection.Input, this);
            BPort = RuntimePort.Create(PortType.Boolean, PortDirection.Input, this);
            ResultPort = RuntimePort.Create(PortType.Boolean, PortDirection.Output, this);
        }

        public void UpdateA(bool newValue) {
            if(A == newValue) return;
            A = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateB(bool newValue) {
            if(B == newValue) return;
            B = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateOperation(BooleanMathNode_Operation newValue) {
            if(Operation == newValue) return;
            Operation = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ResultPort) {
                return Operation switch {
                    BooleanMathNode_Operation.AND => A && B,
                    BooleanMathNode_Operation.OR => A || B,
                    BooleanMathNode_Operation.XOR => A ^ B,
                    BooleanMathNode_Operation.NOT => !A,
                    _ => throw new ArgumentOutOfRangeException(nameof(Operation), Operation, null)
                };
            }
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ResultPort) return;
            if (port == APort) {
                var newValue = GetValue(connection, A);
                if(A == newValue) return;
                A = newValue;
                NotifyPortValueChanged(ResultPort);
            } else if (port == BPort) {
                var newValue = GetValue(connection, B);
                if(B == newValue) return;
                B = newValue;
                NotifyPortValueChanged(ResultPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                A ? 1 : 0,
                B ? 1 : 0,
                (int)Operation,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            A = array.Value<int>(0) == 1;
            B = array.Value<int>(1) == 1;
            Operation = (BooleanMathNode_Operation) array.Value<int>(2);

            NotifyPortValueChanged(ResultPort);
        }
    }
}