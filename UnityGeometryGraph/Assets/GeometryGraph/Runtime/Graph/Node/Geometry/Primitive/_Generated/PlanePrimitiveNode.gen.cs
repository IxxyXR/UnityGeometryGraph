// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using GeometryGraph.Runtime.Attributes;
using GeometryGraph.Runtime.Geometry;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using Unity.Mathematics;
using UnityCommons;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::PlanePrimitiveNode")]
    public partial class PlanePrimitiveNode : RuntimeNode {
        public RuntimePort WidthPort { get; }
        public RuntimePort HeightPort { get; }
        public RuntimePort SubdivisionsPort { get; }
        public RuntimePort ResultPort { get; }

        public PlanePrimitiveNode(string guid) : base(guid) {
            WidthPort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            HeightPort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            SubdivisionsPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            ResultPort = RuntimePort.Create(PortType.Geometry, PortDirection.Output, this);
        }

        public void UpdateWidth(float newValue) {
            if(Math.Abs(Width - newValue) < Constants.FLOAT_TOLERANCE) return;
            Width = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateHeight(float newValue) {
            if(Math.Abs(Height - newValue) < Constants.FLOAT_TOLERANCE) return;
            Height = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateSubdivisions(int newValue) {
            if(Subdivisions == newValue) return;
            Subdivisions = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ResultPort) return Result;
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ResultPort) return;
            if (port == WidthPort) {
                var newValue = GetValue(connection, Width);
                if(Math.Abs(Width - newValue) < Constants.FLOAT_TOLERANCE) return;
                Width = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            } else if (port == HeightPort) {
                var newValue = GetValue(connection, Height);
                if(Math.Abs(Height - newValue) < Constants.FLOAT_TOLERANCE) return;
                Height = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            } else if (port == SubdivisionsPort) {
                var newValue = GetValue(connection, Subdivisions);
                newValue = newValue.MinClamped(0);
                if(Subdivisions == newValue) return;
                Subdivisions = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                Width,
                Height,
                Subdivisions,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            Width = array.Value<float>(0);
            Height = array.Value<float>(1);
            Subdivisions = array.Value<int>(2);

            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }
    }
}