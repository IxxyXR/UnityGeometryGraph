// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using GeometryGraph.Runtime.Attributes;
using GeometryGraph.Runtime.Geometry;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityCommons;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::SampleCollectionNode")]
    public partial class SampleCollectionNode : RuntimeNode {
        public RuntimePort CollectionPort { get; }
        public RuntimePort IndexPort { get; }
        public RuntimePort SeedPort { get; }
        public RuntimePort ResultPort { get; }

        public SampleCollectionNode(string guid) : base(guid) {
            CollectionPort = RuntimePort.Create(PortType.Collection, PortDirection.Input, this);
            IndexPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            SeedPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            ResultPort = RuntimePort.Create(PortType.Geometry, PortDirection.Output, this);
        }

        public void UpdateIndex(int newValue) {
            if(Index == newValue) return;
            Index = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateSeed(int newValue) {
            if(Seed == newValue) return;
            Seed = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateSampleType(SampleCollectionNode_SampleType newValue) {
            if(SampleType == newValue) return;
            SampleType = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ResultPort) return Result;
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ResultPort) return;
            if (port == CollectionPort) {
                var newValue = GetValue(connection, Enumerable.Empty<GeometryData>());
                Collection = new List<GeometryData>(newValue);
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            } else if (port == IndexPort) {
                var newValue = GetValue(connection, Index);
                if(Index == newValue) return;
                Index = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            } else if (port == SeedPort) {
                var newValue = GetValue(connection, Seed);
                if(Seed == newValue) return;
                Seed = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                Index,
                Seed,
                (int)SampleType,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            Index = array.Value<int>(0);
            Seed = array.Value<int>(1);
            SampleType = (SampleCollectionNode_SampleType) array.Value<int>(2);

            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }
    }
}