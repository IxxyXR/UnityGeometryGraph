// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using GeometryGraph.Runtime.Attributes;
using GeometryGraph.Runtime.Geometry;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityCommons;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::SubdivideNode")]
    public partial class SubdivideNode : RuntimeNode {
        public RuntimePort InputPort { get; }
        public RuntimePort LevelsPort { get; }
        public RuntimePort ResultPort { get; }

        public SubdivideNode(string guid) : base(guid) {
            InputPort = RuntimePort.Create(PortType.Geometry, PortDirection.Input, this);
            LevelsPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            ResultPort = RuntimePort.Create(PortType.Geometry, PortDirection.Output, this);
        }

        public void UpdateLevels(int newValue) {
            if(Levels == newValue) return;
            Levels = newValue;
            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ResultPort) {
                if (Result == null) CalculateResult();
                return Result;
            }
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ResultPort) return;
            if (port == InputPort) {
                var newValue = GetValue(connection, GeometryData.Empty);
                newValue = newValue.Clone();
                Input = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            } else if (port == LevelsPort) {
                var newValue = GetValue(connection, Levels);
                newValue = newValue.Clamped(0, Constants.MAX_SUBDIVISIONS);
                if(Levels == newValue) return;
                Levels = newValue;
                CalculateResult();
                NotifyPortValueChanged(ResultPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                Levels,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            Levels = array.Value<int>(0);

            CalculateResult();
            NotifyPortValueChanged(ResultPort);
        }
    }
}