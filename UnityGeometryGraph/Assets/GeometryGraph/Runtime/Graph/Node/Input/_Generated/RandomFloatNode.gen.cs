// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using GeometryGraph.Runtime.Attributes;
using JetBrains.Annotations;
using UnityCommons;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::RandomFloatNode")]
    public partial class RandomFloatNode : RuntimeNode {
        public RuntimePort SeedPort { get; }
        public RuntimePort ValuePort { get; }

        public RandomFloatNode(string guid) : base(guid) {
            SeedPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            ValuePort = RuntimePort.Create(PortType.Float, PortDirection.Output, this);
        }

        public void UpdateSeed(int newValue) {
            if(Seed == newValue) return;
            Seed = newValue;
            NotifyPortValueChanged(ValuePort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ValuePort) return Rand.FloatSeeded(Seed);
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ValuePort) return;
            if (port == SeedPort) {
                var newValue = GetValue(SeedPort, Seed);
                if(Seed == newValue) return;
                Seed = newValue;
                NotifyPortValueChanged(ValuePort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                Seed,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            Seed = array.Value<int>(0);

            NotifyPortValueChanged(ValuePort);
        }
    }
}