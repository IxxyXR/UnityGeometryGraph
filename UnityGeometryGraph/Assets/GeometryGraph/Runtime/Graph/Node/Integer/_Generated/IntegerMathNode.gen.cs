// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using GeometryGraph.Runtime.Attributes;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::IntegerMathNode")]
    public partial class IntegerMathNode : RuntimeNode {
        public RuntimePort XPort { get; }
        public RuntimePort YPort { get; }
        public RuntimePort TolerancePort { get; }
        public RuntimePort ExtraPort { get; }
        public RuntimePort ResultPort { get; }

        public IntegerMathNode(string guid) : base(guid) {
            XPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            YPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            TolerancePort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            ExtraPort = RuntimePort.Create(PortType.Integer, PortDirection.Input, this);
            ResultPort = RuntimePort.Create(PortType.Integer, PortDirection.Output, this);
        }

        public void UpdateX(int newValue) {
            if(X == newValue) return;
            X = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateY(int newValue) {
            if(Y == newValue) return;
            Y = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateTolerance(float newValue) {
            if(Math.Abs(Tolerance - newValue) < Constants.FLOAT_TOLERANCE) return;
            Tolerance = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateExtra(int newValue) {
            if(Extra == newValue) return;
            Extra = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        public void UpdateOperation(IntegerMathNode_Operation newValue) {
            if(Operation == newValue) return;
            Operation = newValue;
            NotifyPortValueChanged(ResultPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == ResultPort) return Calculate();
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == ResultPort) return;
            if (port == XPort) {
                var newValue = GetValue(connection, X);
                if(X == newValue) return;
                X = newValue;
                NotifyPortValueChanged(ResultPort);
            } else if (port == YPort) {
                var newValue = GetValue(connection, Y);
                if(Y == newValue) return;
                Y = newValue;
                NotifyPortValueChanged(ResultPort);
            } else if (port == TolerancePort) {
                var newValue = GetValue(connection, Tolerance);
                if(Math.Abs(Tolerance - newValue) < Constants.FLOAT_TOLERANCE) return;
                Tolerance = newValue;
                NotifyPortValueChanged(ResultPort);
            } else if (port == ExtraPort) {
                var newValue = GetValue(connection, Extra);
                if(Extra == newValue) return;
                Extra = newValue;
                NotifyPortValueChanged(ResultPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                X,
                Y,
                Tolerance,
                Extra,
                (int)Operation,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            X = array.Value<int>(0);
            Y = array.Value<int>(1);
            Tolerance = array.Value<float>(2);
            Extra = array.Value<int>(3);
            Operation = (IntegerMathNode_Operation) array.Value<int>(4);

            NotifyPortValueChanged(ResultPort);
        }
    }
}