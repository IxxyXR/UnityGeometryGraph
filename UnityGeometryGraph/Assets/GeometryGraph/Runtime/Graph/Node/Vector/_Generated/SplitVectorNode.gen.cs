// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using GeometryGraph.Runtime.Attributes;
using GeometryGraph.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using Unity.Mathematics;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::SplitVectorNode")]
    public partial class SplitVectorNode : RuntimeNode {
        public RuntimePort VectorPort { get; }
        public RuntimePort XPort { get; }
        public RuntimePort YPort { get; }
        public RuntimePort ZPort { get; }

        public SplitVectorNode(string guid) : base(guid) {
            VectorPort = RuntimePort.Create(PortType.Vector, PortDirection.Input, this);
            XPort = RuntimePort.Create(PortType.Float, PortDirection.Output, this);
            YPort = RuntimePort.Create(PortType.Float, PortDirection.Output, this);
            ZPort = RuntimePort.Create(PortType.Float, PortDirection.Output, this);
        }

        public void UpdateVector(float3 newValue) {
            Vector = newValue;
            NotifyPortValueChanged(XPort);
            NotifyPortValueChanged(YPort);
            NotifyPortValueChanged(ZPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == XPort) return Vector.x;
            if (port == YPort) return Vector.y;
            if (port == ZPort) return Vector.z;
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == XPort || port == YPort || port == ZPort) return;
            if (port == VectorPort) {
                var newValue = GetValue(connection, Vector);
                Vector = newValue;
                NotifyPortValueChanged(XPort);
                NotifyPortValueChanged(YPort);
                NotifyPortValueChanged(ZPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                JsonConvert.SerializeObject(Vector, float3Converter.Converter),
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            Vector = JsonConvert.DeserializeObject<float3>(array.Value<string>(0), float3Converter.Converter);

            NotifyPortValueChanged(XPort);
            NotifyPortValueChanged(YPort);
            NotifyPortValueChanged(ZPort);
        }
    }
}