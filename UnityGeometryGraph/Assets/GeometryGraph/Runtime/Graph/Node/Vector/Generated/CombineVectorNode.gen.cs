// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GeometryGraph Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using GeometryGraph.Runtime.Attributes;
using Unity.Mathematics;
using GeometryGraph.Runtime.Serialization;

namespace GeometryGraph.Runtime.Graph {
    [SourceClass("GeometryGraph.Runtime::GeometryGraph.Runtime.Graph::CombineVectorNode")]
    public partial class CombineVectorNode : RuntimeNode {
        public RuntimePort XPort { get; }
        public RuntimePort YPort { get; }
        public RuntimePort ZPort { get; }
        public RuntimePort VectorPort { get; }

        public CombineVectorNode(string guid) : base(guid) {
            XPort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            YPort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            ZPort = RuntimePort.Create(PortType.Float, PortDirection.Input, this);
            VectorPort = RuntimePort.Create(PortType.Vector, PortDirection.Output, this);
        }

        public void UpdateX(float newValue) {
            if(Math.Abs(X - newValue) < Constants.FLOAT_TOLERANCE) return;
            X = newValue;
            CalculateVector();
            NotifyPortValueChanged(VectorPort);
        }

        public void UpdateY(float newValue) {
            if(Math.Abs(Y - newValue) < Constants.FLOAT_TOLERANCE) return;
            Y = newValue;
            CalculateVector();
            NotifyPortValueChanged(VectorPort);
        }

        public void UpdateZ(float newValue) {
            if(Math.Abs(Z - newValue) < Constants.FLOAT_TOLERANCE) return;
            Z = newValue;
            CalculateVector();
            NotifyPortValueChanged(VectorPort);
        }

        protected override object GetValueForPort(RuntimePort port) {
            if (port == VectorPort) return Vector;
            return null;
        }

        protected override void OnPortValueChanged(Connection connection, RuntimePort port) {
            if (port == VectorPort) return;
            if (port == XPort) {
                var newValue = GetValue(XPort, X);
                if(Math.Abs(X - newValue) < Constants.FLOAT_TOLERANCE) return;
                X = newValue;
                CalculateVector();
                NotifyPortValueChanged(VectorPort);
            } else if (port == YPort) {
                var newValue = GetValue(YPort, Y);
                if(Math.Abs(Y - newValue) < Constants.FLOAT_TOLERANCE) return;
                Y = newValue;
                CalculateVector();
                NotifyPortValueChanged(VectorPort);
            } else if (port == ZPort) {
                var newValue = GetValue(ZPort, Z);
                if(Math.Abs(Z - newValue) < Constants.FLOAT_TOLERANCE) return;
                Z = newValue;
                CalculateVector();
                NotifyPortValueChanged(VectorPort);
            }
        }

        public override string GetCustomData() {
            return new JArray {
                X,
                Y,
                Z,
            }.ToString(Formatting.None);
        }

        public override void SetCustomData(string data) {
            JArray array = JArray.Parse(data);
            X = array.Value<float>(0);
            Y = array.Value<float>(1);
            Z = array.Value<float>(2);

            CalculateVector();
            NotifyPortValueChanged(VectorPort);
        }
    }
}